{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass DataAccessService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiEndpoint = \"http://localhost:8080/images\";\n    this.imagesById = {};\n    this.connectionError = \"Error occurred please try again later.\";\n    this.tooManyRequests = \"Too many requests! Please try again in a minute.\";\n  }\n  addImageToIndex(image) {\n    console.log(\"added\");\n    this.imagesById[image.id] = image;\n  }\n  getImageFromIndexById(id) {\n    console.log(Object.entries(this.imagesById));\n    return this.imagesById[id];\n  }\n  getImagesPageOf(params) {\n    const httpParams = new HttpParams({\n      fromObject: params\n    });\n    this.httpClient.get(this.apiEndpoint);\n  }\n  getImageById(id) {\n    const headers = new HttpHeaders({\n      \"Content-Type\": \"application/json\"\n    });\n    return this.httpClient.get(this.apiEndpoint + \"/\" + id, {\n      headers: headers\n    }).pipe(tap(data => this.addImageToIndex(data)), catchError(throwError));\n  }\n  categoriseImageUrl(url) {\n    const headers = new HttpHeaders({\n      \"Content-Type\": \"application/json\"\n    });\n    return this.httpClient.post(this.apiEndpoint, url, {\n      headers: headers\n    }).pipe(tap(data => this.addImageToIndex(data)), catchError(this.handlePostRequestError));\n  }\n  handlePostRequestError(httpErrorResponse) {\n    let errorMessage = \"\";\n    if (httpErrorResponse.error instanceof ErrorEvent) {\n      errorMessage = this.connectionError;\n    } else {\n      if (httpErrorResponse.status === 429) {\n        errorMessage = this.tooManyRequests;\n      } else if (httpErrorResponse.status === 400 || httpErrorResponse.status === 503) {\n        errorMessage = httpErrorResponse.error.error;\n      }\n    }\n    return throwError(() => errorMessage);\n  }\n}\nDataAccessService.ɵfac = function DataAccessService_Factory(t) {\n  return new (t || DataAccessService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataAccessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataAccessService,\n  factory: DataAccessService.ɵfac,\n  providedIn: \"root\"\n});\nexport { DataAccessService };","map":{"version":3,"names":["HttpHeaders","HttpParams","catchError","tap","throwError","DataAccessService","constructor","httpClient","apiEndpoint","imagesById","connectionError","tooManyRequests","addImageToIndex","image","console","log","id","getImageFromIndexById","Object","entries","getImagesPageOf","params","httpParams","fromObject","get","getImageById","headers","pipe","data","categoriseImageUrl","url","post","handlePostRequestError","httpErrorResponse","errorMessage","error","ErrorEvent","status","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/georgicholev/MyDocuments/ics/ics-client/src/app/shared/data-access.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpErrorResponse, HttpHeaders, HttpParams} from \"@angular/common/http\";\nimport {catchError, Observable, tap, throwError} from \"rxjs\";\nimport {Image} from \"./image\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DataAccessService {\n\n    private apiEndpoint = \"http://localhost:8080/images\";\n\n    constructor(private httpClient: HttpClient) {\n    }\n\n    imagesById: { [key: string]: Image } = {};\n\n    addImageToIndex(image: Image) {\n        console.log(\"added\");\n        this.imagesById[image.id] = image;\n    }\n\n    getImageFromIndexById(id: string) {\n        console.log(Object.entries(this.imagesById));\n        return this.imagesById[id];\n    }\n\n    getImagesPageOf(params: {}) {\n        const httpParams = new HttpParams({ fromObject: params });\n\n        this.httpClient\n            .get<Image[]>(this.apiEndpoint)\n    }\n\n    getImageById(id: string) {\n        const headers = new HttpHeaders({\"Content-Type\": \"application/json\"});\n        return this.httpClient\n            .get<Image>(this.apiEndpoint + \"/\" + id, {headers: headers})\n            .pipe(\n                tap(data => this.addImageToIndex(data)),\n                catchError(throwError)\n            );\n    }\n    categoriseImageUrl(url: string): Observable<Image> {\n        const headers = new HttpHeaders({\"Content-Type\": \"application/json\"});\n        return this.httpClient\n            .post<Image>(this.apiEndpoint, url, {headers: headers})\n            .pipe(\n                tap(data => this.addImageToIndex(data)),\n                catchError(this.handlePostRequestError)\n            );\n    }\n\n    connectionError: string = \"Error occurred please try again later.\";\n    tooManyRequests: string = \"Too many requests! Please try again in a minute.\";\n\n    private handlePostRequestError(httpErrorResponse: HttpErrorResponse) {\n        let errorMessage = \"\";\n        if (httpErrorResponse.error instanceof ErrorEvent) {\n            errorMessage = this.connectionError;\n        } else {\n            if (httpErrorResponse.status === 429) {\n                errorMessage = this.tooManyRequests;\n            } else if (httpErrorResponse.status === 400 || httpErrorResponse.status === 503) {\n                errorMessage = httpErrorResponse.error.error;\n            }\n        }\n\n        return throwError(() => errorMessage);\n    }\n}\n"],"mappings":"AACA,SAAuCA,WAAW,EAAEC,UAAU,QAAO,sBAAsB;AAC3F,SAAQC,UAAU,EAAcC,GAAG,EAAEC,UAAU,QAAO,MAAM;;;AAG5D,MAGaC,iBAAiB;EAI1BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,WAAW,GAAG,8BAA8B;IAKpD,KAAAC,UAAU,GAA6B,EAAE;IAsCzC,KAAAC,eAAe,GAAW,wCAAwC;IAClE,KAAAC,eAAe,GAAW,kDAAkD;EAzC5E;EAIAC,eAAeA,CAACC,KAAY;IACxBC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,IAAI,CAACN,UAAU,CAACI,KAAK,CAACG,EAAE,CAAC,GAAGH,KAAK;EACrC;EAEAI,qBAAqBA,CAACD,EAAU;IAC5BF,OAAO,CAACC,GAAG,CAACG,MAAM,CAACC,OAAO,CAAC,IAAI,CAACV,UAAU,CAAC,CAAC;IAC5C,OAAO,IAAI,CAACA,UAAU,CAACO,EAAE,CAAC;EAC9B;EAEAI,eAAeA,CAACC,MAAU;IACtB,MAAMC,UAAU,GAAG,IAAIrB,UAAU,CAAC;MAAEsB,UAAU,EAAEF;IAAM,CAAE,CAAC;IAEzD,IAAI,CAACd,UAAU,CACViB,GAAG,CAAU,IAAI,CAAChB,WAAW,CAAC;EACvC;EAEAiB,YAAYA,CAACT,EAAU;IACnB,MAAMU,OAAO,GAAG,IAAI1B,WAAW,CAAC;MAAC,cAAc,EAAE;IAAkB,CAAC,CAAC;IACrE,OAAO,IAAI,CAACO,UAAU,CACjBiB,GAAG,CAAQ,IAAI,CAAChB,WAAW,GAAG,GAAG,GAAGQ,EAAE,EAAE;MAACU,OAAO,EAAEA;IAAO,CAAC,CAAC,CAC3DC,IAAI,CACDxB,GAAG,CAACyB,IAAI,IAAI,IAAI,CAAChB,eAAe,CAACgB,IAAI,CAAC,CAAC,EACvC1B,UAAU,CAACE,UAAU,CAAC,CACzB;EACT;EACAyB,kBAAkBA,CAACC,GAAW;IAC1B,MAAMJ,OAAO,GAAG,IAAI1B,WAAW,CAAC;MAAC,cAAc,EAAE;IAAkB,CAAC,CAAC;IACrE,OAAO,IAAI,CAACO,UAAU,CACjBwB,IAAI,CAAQ,IAAI,CAACvB,WAAW,EAAEsB,GAAG,EAAE;MAACJ,OAAO,EAAEA;IAAO,CAAC,CAAC,CACtDC,IAAI,CACDxB,GAAG,CAACyB,IAAI,IAAI,IAAI,CAAChB,eAAe,CAACgB,IAAI,CAAC,CAAC,EACvC1B,UAAU,CAAC,IAAI,CAAC8B,sBAAsB,CAAC,CAC1C;EACT;EAKQA,sBAAsBA,CAACC,iBAAoC;IAC/D,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,iBAAiB,CAACE,KAAK,YAAYC,UAAU,EAAE;MAC/CF,YAAY,GAAG,IAAI,CAACxB,eAAe;KACtC,MAAM;MACH,IAAIuB,iBAAiB,CAACI,MAAM,KAAK,GAAG,EAAE;QAClCH,YAAY,GAAG,IAAI,CAACvB,eAAe;OACtC,MAAM,IAAIsB,iBAAiB,CAACI,MAAM,KAAK,GAAG,IAAIJ,iBAAiB,CAACI,MAAM,KAAK,GAAG,EAAE;QAC7EH,YAAY,GAAGD,iBAAiB,CAACE,KAAK,CAACA,KAAK;;;IAIpD,OAAO/B,UAAU,CAAC,MAAM8B,YAAY,CAAC;EACzC;;AA7DS7B,iBAAiB,C;mBAAjBA,iBAAiB,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAjBpC,iBAAiB,C;SAAjBA,iBAAiB;EAAAqC,OAAA,EAAjBrC,iBAAiB,CAAAsC,IAAA;EAAAC,UAAA,EAFd;AAAM;SAETvC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
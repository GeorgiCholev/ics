{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { catchError, tap, throwError } from \"rxjs\";\nimport * as lodash from \"lodash\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass DataAccessService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiEndpoint = \"http://localhost:8080/images\";\n    this.imagesById = {};\n    this.imagesByPage = [];\n    this.imagesBatchSize = 12;\n    this.connectionError = \"Error occurred please try again later.\";\n    this.tooManyRequests = \"Too many requests! Please try again in a minute.\";\n  }\n  // imagesByTagsForPage: {[key: string]: {[key: number]: Image[]}} = {};\n  getImagesPageFromIndex(pageNum) {\n    return this.imagesByPage[pageNum];\n  }\n  addImagesPageToIndex(pageNum, dataArr) {\n    this.imagesByPage[pageNum] = lodash.take(dataArr, this.imagesBatchSize);\n  }\n  addImageToIndex(image) {\n    this.imagesById[image.id] = image;\n  }\n  getImageFromIndexById(id) {\n    return this.imagesById[id];\n  }\n  getImagesPageOf(params, pageNum) {\n    let httpParams = new HttpParams({\n      fromObject: params\n    });\n    httpParams = httpParams.append('num', pageNum);\n    httpParams = httpParams.append('size', this.imagesBatchSize);\n    return this.httpClient.get(this.apiEndpoint, {\n      params: httpParams\n    }).pipe(tap(dataArr => {\n      dataArr.forEach(data => this.addImageToIndex(data));\n      this.addImagesPageToIndex(pageNum, dataArr);\n      this.imagesByPage[pageNum] = lodash.take(dataArr, this.imagesBatchSize);\n    }), catchError(throwError));\n  }\n  getImageById(id) {\n    const headers = new HttpHeaders({\n      \"Content-Type\": \"application/json\"\n    });\n    return this.httpClient.get(this.apiEndpoint + \"/\" + id, {\n      headers: headers\n    }).pipe(tap(data => this.addImageToIndex(data)), catchError(throwError));\n  }\n  categoriseImageUrl(url) {\n    const headers = new HttpHeaders({\n      \"Content-Type\": \"application/json\"\n    });\n    return this.httpClient.post(this.apiEndpoint, url, {\n      headers: headers\n    }).pipe(tap(data => this.addImageToIndex(data)), catchError(this.handlePostRequestError));\n  }\n  handlePostRequestError(httpErrorResponse) {\n    let errorMessage = \"\";\n    if (httpErrorResponse.error instanceof ErrorEvent) {\n      errorMessage = this.connectionError;\n    } else {\n      if (httpErrorResponse.status === 429) {\n        errorMessage = this.tooManyRequests;\n      } else if (httpErrorResponse.status === 400 || httpErrorResponse.status === 503) {\n        errorMessage = httpErrorResponse.error.error;\n      }\n    }\n    return throwError(() => errorMessage);\n  }\n}\nDataAccessService.ɵfac = function DataAccessService_Factory(t) {\n  return new (t || DataAccessService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataAccessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataAccessService,\n  factory: DataAccessService.ɵfac,\n  providedIn: \"root\"\n});\nexport { DataAccessService };","map":{"version":3,"names":["HttpHeaders","HttpParams","catchError","tap","throwError","lodash","DataAccessService","constructor","httpClient","apiEndpoint","imagesById","imagesByPage","imagesBatchSize","connectionError","tooManyRequests","getImagesPageFromIndex","pageNum","addImagesPageToIndex","dataArr","take","addImageToIndex","image","id","getImageFromIndexById","getImagesPageOf","params","httpParams","fromObject","append","get","pipe","forEach","data","getImageById","headers","categoriseImageUrl","url","post","handlePostRequestError","httpErrorResponse","errorMessage","error","ErrorEvent","status","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/georgicholev/MyDocuments/ics/ics-client/src/app/shared/data-access.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpErrorResponse, HttpHeaders, HttpParams} from \"@angular/common/http\";\nimport {catchError, Observable, tap, throwError} from \"rxjs\";\nimport {Image} from \"./image\";\nimport * as lodash from \"lodash\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DataAccessService {\n\n    private apiEndpoint = \"http://localhost:8080/images\";\n\n    constructor(private httpClient: HttpClient) {\n    }\n\n    imagesById: { [key: string]: Image } = {};\n    imagesByPage: Image[][] = [];\n    imagesBatchSize = 12;\n    // imagesByTagsForPage: {[key: string]: {[key: number]: Image[]}} = {};\n\n    getImagesPageFromIndex(pageNum: number) {\n        return this.imagesByPage[pageNum];\n    }\n    addImagesPageToIndex(pageNum: number, dataArr: Image[]) {\n        this.imagesByPage[pageNum] = lodash.take(dataArr, this.imagesBatchSize);\n    }\n\n    addImageToIndex(image: Image) {\n        this.imagesById[image.id] = image;\n    }\n\n    getImageFromIndexById(id: string) {\n        return this.imagesById[id];\n    }\n\n    getImagesPageOf(params: {}, pageNum: number) {\n        let httpParams = new HttpParams({fromObject: params});\n        httpParams = httpParams.append('num', pageNum);\n        httpParams = httpParams.append('size', this.imagesBatchSize);\n\n        return this.httpClient\n            .get<Image[]>(this.apiEndpoint, {params: httpParams})\n            .pipe(\n                tap(dataArr => {\n                    dataArr.forEach(data => this.addImageToIndex(data))\n                    this.addImagesPageToIndex(pageNum, dataArr);\n                    this.imagesByPage[pageNum] = lodash.take(dataArr, this.imagesBatchSize);\n                }),\n                catchError(throwError)\n            );\n    }\n\n    getImageById(id: string) {\n        const headers = new HttpHeaders({\"Content-Type\": \"application/json\"});\n        return this.httpClient\n            .get<Image>(this.apiEndpoint + \"/\" + id, {headers: headers})\n            .pipe(\n                tap(data => this.addImageToIndex(data)),\n                catchError(throwError)\n            );\n    }\n\n    categoriseImageUrl(url: string): Observable<Image> {\n        const headers = new HttpHeaders({\"Content-Type\": \"application/json\"});\n        return this.httpClient\n            .post<Image>(this.apiEndpoint, url, {headers: headers})\n            .pipe(\n                tap(data => this.addImageToIndex(data)),\n                catchError(this.handlePostRequestError)\n            );\n    }\n\n    connectionError: string = \"Error occurred please try again later.\";\n    tooManyRequests: string = \"Too many requests! Please try again in a minute.\";\n\n    private handlePostRequestError(httpErrorResponse: HttpErrorResponse) {\n        let errorMessage = \"\";\n        if (httpErrorResponse.error instanceof ErrorEvent) {\n            errorMessage = this.connectionError;\n        } else {\n            if (httpErrorResponse.status === 429) {\n                errorMessage = this.tooManyRequests;\n            } else if (httpErrorResponse.status === 400 || httpErrorResponse.status === 503) {\n                errorMessage = httpErrorResponse.error.error;\n            }\n        }\n\n        return throwError(() => errorMessage);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
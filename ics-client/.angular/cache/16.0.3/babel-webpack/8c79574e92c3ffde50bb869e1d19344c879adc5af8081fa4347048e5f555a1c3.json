{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass DataAccessService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiEndpoint = \"http://localhost:8080/images\";\n    this.connectionError = \"Error occurred please try again later.\";\n    this.tooManyRequests = \"Too many requests! Please try again in a minute.\";\n  }\n  addImageById(image) {\n    this.imagesById[image.id] = image;\n  }\n  get imageWithDetails() {\n    return this._imageWithDetails;\n  }\n  set imageWithDetails(value) {\n    this._imageWithDetails = value;\n  }\n  categoriseImageUrl(url) {\n    const headers = new HttpHeaders({\n      \"Content-Type\": \"application/json\"\n    });\n    return this.httpClient.post(this.apiEndpoint, url, {\n      headers: headers\n    }).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n  handleError(httpErrorResponse) {\n    let errorMessage = \"\";\n    if (httpErrorResponse.error instanceof ErrorEvent) {\n      errorMessage = this.connectionError;\n    } else {\n      if (httpErrorResponse.status === 429) {\n        errorMessage = this.tooManyRequests;\n      } else {\n        errorMessage = httpErrorResponse.error.error;\n      }\n    }\n    console.error(errorMessage);\n    return throwError(() => errorMessage);\n  }\n}\nDataAccessService.ɵfac = function DataAccessService_Factory(t) {\n  return new (t || DataAccessService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataAccessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataAccessService,\n  factory: DataAccessService.ɵfac,\n  providedIn: \"root\"\n});\nexport { DataAccessService };","map":{"version":3,"names":["HttpHeaders","catchError","tap","throwError","DataAccessService","constructor","httpClient","apiEndpoint","connectionError","tooManyRequests","addImageById","image","imagesById","id","imageWithDetails","_imageWithDetails","value","categoriseImageUrl","url","headers","post","pipe","data","console","log","JSON","stringify","handleError","httpErrorResponse","errorMessage","error","ErrorEvent","status","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/georgicholev/MyDocuments/ics/ics-client/src/app/shared/data-access.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from \"@angular/common/http\";\nimport {UrlSubmit} from \"../url-submit/url-submit\";\nimport {catchError, Observable, tap, throwError} from \"rxjs\";\nimport {Image} from \"./image\";\nimport {ImageDetailComponent} from \"../image-detail/image-detail.component\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class DataAccessService {\n\n  private apiEndpoint = \"http://localhost:8080/images\";\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  imagesById!:{id:string, value:Image};\n\n  addImageById(image: Image) {\n    this.imagesById[image.id] = image;\n  }\n\n  private _imageWithDetails!: Image;\n\n  get imageWithDetails(): Image {\n    return this._imageWithDetails;\n  }\n\n  set imageWithDetails(value: Image) {\n    this._imageWithDetails = value;\n  }\n\n  categoriseImageUrl(url: string): Observable<Image> {\n    const headers = new HttpHeaders({\"Content-Type\": \"application/json\"});\n    return this.httpClient\n      .post<Image>(this.apiEndpoint, url, {headers: headers})\n      .pipe(\n        tap(data => console.log(JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  connectionError:string = \"Error occurred please try again later.\";\n  tooManyRequests:string = \"Too many requests! Please try again in a minute.\";\n\n  private handleError(httpErrorResponse: HttpErrorResponse) {\n    let errorMessage = \"\";\n    if (httpErrorResponse.error instanceof ErrorEvent) {\n      errorMessage = this.connectionError;\n    } else {\n      if (httpErrorResponse.status === 429) {\n        errorMessage = this.tooManyRequests;\n      } else {\n        errorMessage = httpErrorResponse.error.error;\n      }\n    }\n\n    console.error(errorMessage);\n    return throwError(() => errorMessage);\n  }\n}\n"],"mappings":"AACA,SAAuCA,WAAW,QAAO,sBAAsB;AAE/E,SAAQC,UAAU,EAAcC,GAAG,EAAEC,UAAU,QAAO,MAAM;;;AAI5D,MAGaC,iBAAiB;EAI5BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,WAAW,GAAG,8BAA8B;IA+BpD,KAAAC,eAAe,GAAU,wCAAwC;IACjE,KAAAC,eAAe,GAAU,kDAAkD;EA7B3E;EAIAC,YAAYA,CAACC,KAAY;IACvB,IAAI,CAACC,UAAU,CAACD,KAAK,CAACE,EAAE,CAAC,GAAGF,KAAK;EACnC;EAIA,IAAIG,gBAAgBA,CAAA;IAClB,OAAO,IAAI,CAACC,iBAAiB;EAC/B;EAEA,IAAID,gBAAgBA,CAACE,KAAY;IAC/B,IAAI,CAACD,iBAAiB,GAAGC,KAAK;EAChC;EAEAC,kBAAkBA,CAACC,GAAW;IAC5B,MAAMC,OAAO,GAAG,IAAInB,WAAW,CAAC;MAAC,cAAc,EAAE;IAAkB,CAAC,CAAC;IACrE,OAAO,IAAI,CAACM,UAAU,CACnBc,IAAI,CAAQ,IAAI,CAACb,WAAW,EAAEW,GAAG,EAAE;MAACC,OAAO,EAAEA;IAAO,CAAC,CAAC,CACtDE,IAAI,CACHnB,GAAG,CAACoB,IAAI,IAAIC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAAC,EAC9CrB,UAAU,CAAC,IAAI,CAAC0B,WAAW,CAAC,CAC7B;EACL;EAKQA,WAAWA,CAACC,iBAAoC;IACtD,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,iBAAiB,CAACE,KAAK,YAAYC,UAAU,EAAE;MACjDF,YAAY,GAAG,IAAI,CAACrB,eAAe;KACpC,MAAM;MACL,IAAIoB,iBAAiB,CAACI,MAAM,KAAK,GAAG,EAAE;QACpCH,YAAY,GAAG,IAAI,CAACpB,eAAe;OACpC,MAAM;QACLoB,YAAY,GAAGD,iBAAiB,CAACE,KAAK,CAACA,KAAK;;;IAIhDP,OAAO,CAACO,KAAK,CAACD,YAAY,CAAC;IAC3B,OAAO1B,UAAU,CAAC,MAAM0B,YAAY,CAAC;EACvC;;AAlDWzB,iBAAiB,C;mBAAjBA,iBAAiB,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAjBhC,iBAAiB,C;SAAjBA,iBAAiB;EAAAiC,OAAA,EAAjBjC,iBAAiB,CAAAkC,IAAA;EAAAC,UAAA,EAFhB;AAAM;SAEPnC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
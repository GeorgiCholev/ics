{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass CustomRouteReuseStrategy {\n  shouldReuseRoute(future, curr) {\n    return false;\n  }\n  shouldDetach(route) {\n    return false;\n  }\n  store(route, handle) {}\n  shouldAttach(route) {\n    return false;\n  }\n  retrieve(route) {\n    return null;\n  }\n}\nCustomRouteReuseStrategy.ɵfac = function CustomRouteReuseStrategy_Factory(t) {\n  return new (t || CustomRouteReuseStrategy)();\n};\nCustomRouteReuseStrategy.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomRouteReuseStrategy,\n  factory: CustomRouteReuseStrategy.ɵfac\n});\nexport { CustomRouteReuseStrategy };","map":{"version":3,"names":["CustomRouteReuseStrategy","shouldReuseRoute","future","curr","shouldDetach","route","store","handle","shouldAttach","retrieve","factory","ɵfac"],"sources":["/Users/georgicholev/MyDocuments/ics/ics-client/src/app/shared/custom-route-reuse-strategy.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router';\n\n@Injectable()\nexport class CustomRouteReuseStrategy implements RouteReuseStrategy {\n    shouldReuseRoute(\n        future: ActivatedRouteSnapshot,\n        curr: ActivatedRouteSnapshot\n    ): boolean {\n        return false;\n    }\n\n    shouldDetach(route: ActivatedRouteSnapshot): boolean {\n        return false;\n    }\n\n    store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {}\n\n    shouldAttach(route: ActivatedRouteSnapshot): boolean {\n        return false;\n    }\n\n    retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n        return null;\n    }\n}"],"mappings":";AAGA,MACaA,wBAAwB;EACjCC,gBAAgBA,CACZC,MAA8B,EAC9BC,IAA4B;IAE5B,OAAO,KAAK;EAChB;EAEAC,YAAYA,CAACC,KAA6B;IACtC,OAAO,KAAK;EAChB;EAEAC,KAAKA,CAACD,KAA6B,EAAEE,MAA2B,GAAS;EAEzEC,YAAYA,CAACH,KAA6B;IACtC,OAAO,KAAK;EAChB;EAEAI,QAAQA,CAACJ,KAA6B;IAClC,OAAO,IAAI;EACf;;AApBSL,wBAAwB,C;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB,C;SAAxBA,wBAAwB;EAAAU,OAAA,EAAxBV,wBAAwB,CAAAW;AAAA;SAAxBX,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./image-handle.service\";\nclass DataAccessService {\n  constructor(httpClient, imageHandleService) {\n    this.httpClient = httpClient;\n    this.imageHandleService = imageHandleService;\n    this.apiEndpoint = \"http://localhost:8080/images\";\n    //    tap(data => this.addImageByIdToIndex(data)),\n    this.connectionError = \"Error occurred please try again later.\";\n    this.tooManyRequests = \"Too many requests! Please try again in a minute.\";\n  }\n  getImagesPageOf(params, pageNum) {\n    let httpParams = new HttpParams({\n      fromObject: params\n    });\n    httpParams = httpParams.append('num', pageNum);\n    httpParams = httpParams.append('size', this.imageHandleService.batchSize);\n    return this.httpClient.get(this.apiEndpoint, {\n      params: httpParams\n    });\n  }\n  getImageById(id) {\n    const headers = new HttpHeaders({\n      \"Content-Type\": \"application/json\"\n    });\n    return this.httpClient.get(this.apiEndpoint + \"/\" + id, {\n      headers: headers\n    }).pipe(catchError(throwError));\n  }\n  categoriseImageUrl(url) {\n    return this.httpClient.post(this.apiEndpoint, url).pipe(catchError(this.handlePostRequestError));\n  }\n  handlePostRequestError(httpErrorResponse) {\n    let errorMessage = \"\";\n    if (httpErrorResponse.error instanceof ErrorEvent) {\n      errorMessage = this.connectionError;\n    } else {\n      if (httpErrorResponse.status === 429) {\n        errorMessage = this.tooManyRequests;\n      } else if (httpErrorResponse.status === 400 || httpErrorResponse.status === 503) {\n        errorMessage = httpErrorResponse.error.error;\n      }\n    }\n    return throwError(() => errorMessage);\n  }\n}\nDataAccessService.ɵfac = function DataAccessService_Factory(t) {\n  return new (t || DataAccessService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ImageHandleService));\n};\nDataAccessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataAccessService,\n  factory: DataAccessService.ɵfac,\n  providedIn: \"root\"\n});\nexport { DataAccessService };","map":{"version":3,"names":["HttpHeaders","HttpParams","catchError","throwError","DataAccessService","constructor","httpClient","imageHandleService","apiEndpoint","connectionError","tooManyRequests","getImagesPageOf","params","pageNum","httpParams","fromObject","append","batchSize","get","getImageById","id","headers","pipe","categoriseImageUrl","url","post","handlePostRequestError","httpErrorResponse","errorMessage","error","ErrorEvent","status","i0","ɵɵinject","i1","HttpClient","i2","ImageHandleService","factory","ɵfac","providedIn"],"sources":["/Users/georgicholev/MyDocuments/ics/ics-client/src/app/shared/data-access.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpErrorResponse, HttpHeaders, HttpParams} from \"@angular/common/http\";\nimport {catchError, Observable, throwError} from \"rxjs\";\nimport {Image} from \"./image\";\nimport {UrlSubmit} from \"../url-submit/url-submit\";\nimport {ImageHandleService} from \"./image-handle.service\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DataAccessService {\n\n    private apiEndpoint = \"http://localhost:8080/images\";\n\n    constructor(private httpClient: HttpClient, private imageHandleService: ImageHandleService) {\n    }\n\n    getImagesPageOf(params: {}, pageNum: number) {\n        let httpParams = new HttpParams({fromObject: params});\n        httpParams = httpParams.append('num', pageNum);\n        httpParams = httpParams.append('size', this.imageHandleService.batchSize);\n\n        return this.httpClient\n            .get<Image[]>(this.apiEndpoint, {params: httpParams});\n    }\n\n    getImageById(id: string) {\n        const headers = new HttpHeaders({\"Content-Type\": \"application/json\"});\n        return this.httpClient\n            .get<Image>(this.apiEndpoint + \"/\" + id, {headers: headers})\n            .pipe(catchError(throwError));\n    }\n\n    categoriseImageUrl(url: UrlSubmit): Observable<Image> {\n        return this.httpClient\n            .post<Image>(this.apiEndpoint, url)\n            .pipe(catchError(this.handlePostRequestError));\n    }\n\n    //    tap(data => this.addImageByIdToIndex(data)),\n    connectionError: string = \"Error occurred please try again later.\";\n    tooManyRequests: string = \"Too many requests! Please try again in a minute.\";\n\n    private handlePostRequestError(httpErrorResponse: HttpErrorResponse) {\n        let errorMessage = \"\";\n        if (httpErrorResponse.error instanceof ErrorEvent) {\n            errorMessage = this.connectionError;\n        } else {\n            if (httpErrorResponse.status === 429) {\n                errorMessage = this.tooManyRequests;\n            } else if (httpErrorResponse.status === 400 || httpErrorResponse.status === 503) {\n                errorMessage = httpErrorResponse.error.error;\n            }\n        }\n\n        return throwError(() => errorMessage);\n    }\n}\n"],"mappings":"AACA,SAAuCA,WAAW,EAAEC,UAAU,QAAO,sBAAsB;AAC3F,SAAQC,UAAU,EAAcC,UAAU,QAAO,MAAM;;;;AAKvD,MAGaC,iBAAiB;EAI1BC,YAAoBC,UAAsB,EAAUC,kBAAsC;IAAtE,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAF9D,KAAAC,WAAW,GAAG,8BAA8B;IA2BpD;IACA,KAAAC,eAAe,GAAW,wCAAwC;IAClE,KAAAC,eAAe,GAAW,kDAAkD;EA1B5E;EAEAC,eAAeA,CAACC,MAAU,EAAEC,OAAe;IACvC,IAAIC,UAAU,GAAG,IAAIb,UAAU,CAAC;MAACc,UAAU,EAAEH;IAAM,CAAC,CAAC;IACrDE,UAAU,GAAGA,UAAU,CAACE,MAAM,CAAC,KAAK,EAAEH,OAAO,CAAC;IAC9CC,UAAU,GAAGA,UAAU,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACT,kBAAkB,CAACU,SAAS,CAAC;IAEzE,OAAO,IAAI,CAACX,UAAU,CACjBY,GAAG,CAAU,IAAI,CAACV,WAAW,EAAE;MAACI,MAAM,EAAEE;IAAU,CAAC,CAAC;EAC7D;EAEAK,YAAYA,CAACC,EAAU;IACnB,MAAMC,OAAO,GAAG,IAAIrB,WAAW,CAAC;MAAC,cAAc,EAAE;IAAkB,CAAC,CAAC;IACrE,OAAO,IAAI,CAACM,UAAU,CACjBY,GAAG,CAAQ,IAAI,CAACV,WAAW,GAAG,GAAG,GAAGY,EAAE,EAAE;MAACC,OAAO,EAAEA;IAAO,CAAC,CAAC,CAC3DC,IAAI,CAACpB,UAAU,CAACC,UAAU,CAAC,CAAC;EACrC;EAEAoB,kBAAkBA,CAACC,GAAc;IAC7B,OAAO,IAAI,CAAClB,UAAU,CACjBmB,IAAI,CAAQ,IAAI,CAACjB,WAAW,EAAEgB,GAAG,CAAC,CAClCF,IAAI,CAACpB,UAAU,CAAC,IAAI,CAACwB,sBAAsB,CAAC,CAAC;EACtD;EAMQA,sBAAsBA,CAACC,iBAAoC;IAC/D,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,iBAAiB,CAACE,KAAK,YAAYC,UAAU,EAAE;MAC/CF,YAAY,GAAG,IAAI,CAACnB,eAAe;KACtC,MAAM;MACH,IAAIkB,iBAAiB,CAACI,MAAM,KAAK,GAAG,EAAE;QAClCH,YAAY,GAAG,IAAI,CAAClB,eAAe;OACtC,MAAM,IAAIiB,iBAAiB,CAACI,MAAM,KAAK,GAAG,IAAIJ,iBAAiB,CAACI,MAAM,KAAK,GAAG,EAAE;QAC7EH,YAAY,GAAGD,iBAAiB,CAACE,KAAK,CAACA,KAAK;;;IAIpD,OAAO1B,UAAU,CAAC,MAAMyB,YAAY,CAAC;EACzC;;AA9CSxB,iBAAiB,C;mBAAjBA,iBAAiB,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,kBAAA;AAAA;AAAjBjC,iBAAiB,C;SAAjBA,iBAAiB;EAAAkC,OAAA,EAAjBlC,iBAAiB,CAAAmC,IAAA;EAAAC,UAAA,EAFd;AAAM;SAETpC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}